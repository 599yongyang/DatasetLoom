// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// 用户表
model Users {
  id             String          @id @default(nanoid())
  email          String          @unique
  name           String?
  avatar         String?
  password       String
  role           String          @default("USER")
  projects       Projects[]
  projectMembers ProjectMember[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  Chat           Chat[]
}

// 项目表
model Projects {
  id               String           @id @default(nanoid(12))
  name             String
  description      String
  owner            Users            @relation(fields: [ownerId], references: [id])
  ownerId          String
  globalPrompt     String           @default("")
  questionPrompt   String           @default("")
  answerPrompt     String           @default("")
  labelPrompt      String           @default("")
  domainTreePrompt String           @default("")
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  members          ProjectMember[]
  Questions        Questions[]
  DatasetSamples   DatasetSamples[]
  Chunks           Chunks[]
  ModelConfig      ModelConfig[]
  Documents        Documents[]
  ModelProviders   ModelProviders[]
  PreferencePair   PreferencePair[]
  ParserConfig     ParserConfig[]
  Chat             Chat[]
  ImageFile        ImageFile[]
  ImageBlock       ImageBlock[]
}

// 项目成员表
model ProjectMember {
  id        String   @id @default(nanoid())
  project   Projects @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  user      Users    @relation(fields: [userId], references: [id])
  userId    String
  role      String
  joinedAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([projectId, userId])
}

// 文档表
model Documents {
  id             String   @id @default(nanoid())
  project        Projects @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId      String
  fileName       String
  fileExt        String?
  path           String?
  size           Int?
  md5            String?
  sourceType     String   @default("local")
  parserFilePath String?
  parserFileExt  String?
  parserFileSize Int?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  Chunks         Chunks[]
}

// 文档分块表
model Chunks {
  id            String          @id @default(nanoid())
  name          String
  project       Projects        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId     String
  document      Documents       @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId    String
  documentName  String
  content       String
  summary       String          @default("")
  domain        String          @default("")
  subDomain     String          @default("")
  tags          String          @default("")
  language      String          @default("")
  size          Int
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  ChunkEntities ChunkEntities[]

  @@index([projectId])
}

// graph(chunk_entities,chunkRelations)
// 分块实体表
model ChunkEntities {
  id              String  @id @default(nanoid())
  chunk           Chunks  @relation(fields: [chunkId], references: [id], onDelete: Cascade)
  chunkId         String
  type            String
  value           String
  normalizedValue String?

  // Relations
  outgoingRelations ChunkRelation[] @relation("outgoingRelations")
  incomingRelations ChunkRelation[] @relation("incomingRelations")

  @@unique([chunkId, type, normalizedValue])
  @@index([chunkId])
  @@index([type])
  @@index([normalizedValue])
}

// 分块实体关系表
model ChunkRelation {
  id             String        @id @default(nanoid())
  relationType   String
  sourceEntity   ChunkEntities @relation(fields: [sourceEntityId], references: [id], name: "outgoingRelations", onDelete: Cascade)
  sourceEntityId String
  targetEntity   ChunkEntities @relation(fields: [targetEntityId], references: [id], name: "incomingRelations", onDelete: Cascade)
  targetEntityId String

  @@unique([sourceEntityId, targetEntityId, relationType])
  @@index([sourceEntityId])
  @@index([targetEntityId])
  @@index([relationType])
}

// 问题表
model Questions {
  id             String           @id @default(nanoid())
  project        Projects         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId      String
  contextType    String // TEXT(文本)  IMAGE(图像)  AUDIO VIDEO
  contextId      String // 上下文 ID
  contextName    String // 显示名称
  contextData    String // 额外信息（如坐标、OCR 内容等）
  question       String
  realQuestion   String           @default("")
  label          String           @default("")
  answered       Boolean          @default(false)
  deleted        Boolean          @default(false)
  confirmed      Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  DatasetSamples DatasetSamples[]
  PreferencePair PreferencePair?

  @@index([projectId])
}

// QA 数据集表
model DatasetSamples {
  id              String    @id @default(nanoid())
  project         Projects  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId       String
  questions       Questions @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId      String
  question        String
  answer          String
  model           String
  referenceLabel  String
  evidence        String
  cot             String
  confidence      Float
  isPrimaryAnswer Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([projectId])
}

// 数据集结果打分评价表
model DatasetEvaluation {
  id                     String @id @default(nanoid())
  sampleId               String
  sampleType             String
  type                   String // AI or Human
  model                  String // 打分模型
  factualAccuracyScore   Float
  factualInfo            String
  logicalIntegrityScore  Float
  logicalInfo            String
  expressionQualityScore Float
  expressionInfo         String
  safetyComplianceScore  Float
  safetyInfo             String
  compositeScore         Float
  compositeInfo          String

  createdAt DateTime @default(now())
}

// 偏好数据集
model PreferencePair {
  id              String    @id @default(nanoid())
  project         Projects  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId       String
  question        Questions @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId      String    @unique
  prompt          String
  chosen          String
  rejected        String
  datasetChosenId String?
  datasetRejectId String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

// 大模型服务商表
model ModelProviders {
  id            String        @id
  project       Projects      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId     String
  name          String
  apiUrl        String
  apiKey        String
  interfaceType String
  icon          String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  ModelConfig   ModelConfig[]
}

// 模型列表
model ModelRegistry {
  id           String   @id @default(nanoid())
  modelId      String
  modelName    String
  providerName String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// 项目模型配置
model ModelConfig {
  id          String         @id @default(nanoid())
  provider    ModelProviders @relation(fields: [providerId], references: [id])
  providerId  String
  modelId     String
  modelName   String
  type        String
  temperature Float
  maxTokens   Int
  topP        Float?
  topK        Float?
  status      Boolean        @default(true)
  isDefault   Boolean        @default(false)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  Project     Projects       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  ModelUsage  ModelUsage[]
}

// 项目解析服务配置
model ParserConfig {
  id          String   @id @default(nanoid())
  project     Projects @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  serviceId   String
  serviceName String
  apiUrl      String
  apiKey      String
  status      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// 模型对话表
model Chat {
  id              String            @id @default(nanoid())
  project         Projects          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId       String
  title           String
  user            Users             @relation(fields: [userId], references: [id])
  userId          String
  visibility      String            @default("PRIVATE")
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  ChatMessages    ChatMessages[]
  ChatMessageVote ChatMessageVote[]
}

// 对话信息表
model ChatMessages {
  id              String            @id @default(nanoid())
  chat            Chat              @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId          String
  role            String
  parts           String
  attachments     String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  ChatMessageVote ChatMessageVote[]
}

// 对话信息打分表
model ChatMessageVote {
  chat      Chat         @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId    String
  message   ChatMessages @relation(fields: [messageId], references: [id])
  messageId String
  isUpvote  Boolean

  @@unique([chatId, messageId])
}

// 模型使用表
model ModelUsage {
  id               String      @id @default(nanoid())
  projectId        String
  modelConfig      ModelConfig @relation(fields: [modelConfigId], references: [id], onDelete: Cascade)
  modelConfigId    String
  promptTokens     Int
  completionTokens Int
  totalTokens      Int
  createdAt        DateTime    @default(now())

  @@index([createdAt])
  @@index([modelConfigId])
}

// 图像文件
model ImageFile {
  id         String       @id @default(nanoid())
  project    Projects     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId  String
  fileName   String
  width      Int
  height     Int
  size       Int
  url        String
  ocrText    String?
  tags       String       @default("")
  status     String       @default("PENDING")
  createdAt  DateTime     @default(now())
  ImageBlock ImageBlock[]
}

// 图像分块标注表
model ImageBlock {
  id        String    @id @default(nanoid())
  project   Projects  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  image     ImageFile @relation(fields: [imageId], references: [id], onDelete: Cascade)
  imageId   String
  label     String
  x         Float
  y         Float
  width     Float
  height    Float
  createdAt DateTime  @default(now())
}
