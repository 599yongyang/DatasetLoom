generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Projects {
  id                   String        @id @default(nanoid(12))
  name                 String
  description          String
  globalPrompt         String        @default("")
  questionPrompt       String        @default("")
  answerPrompt         String        @default("")
  labelPrompt          String        @default("")
  domainTreePrompt     String        @default("")
  defaultModelConfigId String?
  createAt             DateTime      @default(now())
  updateAt             DateTime      @updatedAt
  Questions            Questions[]
  Datasets             Datasets[]
  Chunks               Chunks[]
  ModelConfig          ModelConfig[]
  Documents            Documents[]
  WorkFlow             WorkFlow[]
}

model Documents {
  id        String   @id @default(nanoid())
  project   Projects @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  fileName  String
  fileExt   String
  path      String
  size      Int
  md5       String
  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model Chunks {
  id            String          @id @default(nanoid())
  name          String
  project       Projects        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId     String
  fileId        String
  fileName      String
  content       String
  summary       String
  size          Int
  createAt      DateTime        @default(now())
  updateAt      DateTime        @updatedAt
  Questions     Questions[]
  ChunkMetadata ChunkMetadata?
  ChunkEntities ChunkEntities[]

  @@index([projectId])
}

model ChunkMetadata {
  id        String  @id @default(nanoid())
  chunk     Chunks  @relation(fields: [chunkId], references: [id], onDelete: Cascade)
  chunkId   String  @unique
  domain    String
  subDomain String?
  summary   String
  tags      String
  language  String
}

// graph(chunk_entities,chunkRelations)

model ChunkEntities {
  id               String @id @default(nanoid())
  chunk            Chunks @relation(fields: [chunkId], references: [id], onDelete: Cascade)
  chunkId          String
  type             String
  value            String
  normalized_value String

  @@unique([chunkId, type, normalized_value])
}

model ChunkRelations {
  id             String @id @default(nanoid())
  sourceEntityId String
  targetEntityId String
  relationType   String

  @@index([sourceEntityId])
  @@index([targetEntityId])
}

model Questions {
  id        String   @id @default(nanoid())
  project   Projects @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  chunk     Chunks   @relation(fields: [chunkId], references: [id], onDelete: Cascade)
  chunkId   String
  question  String
  label     String
  answered  Boolean  @default(false)
  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt

  @@index([projectId])
}

model Datasets {
  id            String   @id @default(nanoid())
  project       Projects @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId     String
  questionId    String
  question      String
  answer        String
  chunkName     String
  chunkContent  String
  model         String
  questionLabel String
  cot           String
  confirmed     Boolean  @default(false)
  createAt      DateTime @default(now())
  updateAt      DateTime @updatedAt

  @@index([projectId])
}

model LlmProviders {
  id        String      @id
  name      String
  apiUrl    String
  createAt  DateTime    @default(now())
  updateAt  DateTime    @updatedAt
  LlmModels LlmModels[]
}

model LlmModels {
  id         String       @id @default(nanoid())
  modelId    String
  modelName  String
  provider   LlmProviders @relation(fields: [providerId], references: [id])
  providerId String
  createAt   DateTime     @default(now())
  updateAt   DateTime     @updatedAt
}

model ModelConfig {
  id           String   @id @default(nanoid())
  project      Projects @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId    String
  providerId   String
  providerName String
  endpoint     String
  apiKey       String
  modelId      String
  modelName    String
  type         String
  temperature  Float
  maxTokens    Int
  topP         Float
  topK         Float
  status       Int
  createAt     DateTime @default(now())
  updateAt     DateTime @updatedAt
}

model WorkFlow {
  id             String         @id @default(nanoid())
  project        Projects       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId      String
  name           String
  description    String?
  edges          String
  nodes          String
  status         Int            @default(0) // 0等待中 1运行中 2执行完成 3执行失败
  isScheduled    Boolean        @default(false)
  cronExpression String?
  runAt          DateTime?
  failedAttempts Int            @default(0)
  maxRetries     Int            @default(3)
  createdAt      DateTime       @default(now())
  startedAt      DateTime?
  finishedAt     DateTime?
  updateAt       DateTime       @updatedAt
  steps          WorkflowStep[]
}

model WorkflowStep {
  id         String    @id @default(nanoid())
  workflow   WorkFlow  @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workflowId String
  name       String
  status     Int       @default(0) // 0等待中 1运行中 2执行完成 3执行失败
  sort       Int
  input      String?
  output     String?
  startedAt  DateTime?
  finishedAt DateTime?
  retryCount Int       @default(0)
  logs       String?
}
