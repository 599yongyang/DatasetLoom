generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Users {
  id             String          @id @default(nanoid())
  email          String          @unique
  name           String?
  avatar         String?
  password       String
  role           String          @default("USER")
  projects       Projects[]
  projectMembers ProjectMember[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  Chat           Chat[]
}

model Projects {
  id               String           @id @default(nanoid(12))
  name             String
  description      String
  owner            Users            @relation(fields: [ownerId], references: [id])
  ownerId          String
  globalPrompt     String           @default("")
  questionPrompt   String           @default("")
  answerPrompt     String           @default("")
  labelPrompt      String           @default("")
  domainTreePrompt String           @default("")
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  members          ProjectMember[]
  Questions        Questions[]
  DatasetSamples   DatasetSamples[]
  Chunks           Chunks[]
  ModelConfig      ModelConfig[]
  Documents        Documents[]
  WorkFlow         WorkFlow[]
  LlmProviders     LlmProviders[]
  PreferencePair   PreferencePair[]
  ParserConfig     ParserConfig[]
  Chat             Chat[]
}

model ProjectMember {
  id        String   @id @default(nanoid())
  project   Projects @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  user      Users    @relation(fields: [userId], references: [id])
  userId    String
  role      String
  joinedAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([projectId, userId])
}

model Documents {
  id             String   @id @default(nanoid())
  project        Projects @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId      String
  fileName       String
  fileExt        String?
  path           String?
  size           Int?
  md5            String?
  sourceType     String   @default("local")
  parserFilePath String?
  parserFileExt  String?
  parserFileSize Int?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  Chunks         Chunks[]
}

model Chunks {
  id            String          @id @default(nanoid())
  name          String
  project       Projects        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId     String
  document      Documents       @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId    String
  documentName  String
  content       String
  summary       String
  domain        String
  subDomain     String
  tags          String
  language      String
  size          Int
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  Questions     Questions[]
  ChunkEntities ChunkEntities[]

  @@index([projectId])
}

// graph(chunk_entities,chunkRelations)

model ChunkEntities {
  id              String  @id @default(nanoid())
  chunk           Chunks  @relation(fields: [chunkId], references: [id], onDelete: Cascade)
  chunkId         String
  type            String
  value           String
  normalizedValue String?

  // Relations
  outgoingRelations ChunkRelation[] @relation("outgoingRelations")
  incomingRelations ChunkRelation[] @relation("incomingRelations")

  @@unique([chunkId, type, normalizedValue])
  @@index([chunkId])
  @@index([type])
  @@index([normalizedValue])
}

model ChunkRelation {
  id             String        @id @default(nanoid())
  relationType   String
  sourceEntity   ChunkEntities @relation(fields: [sourceEntityId], references: [id], name: "outgoingRelations", onDelete: Cascade)
  sourceEntityId String
  targetEntity   ChunkEntities @relation(fields: [targetEntityId], references: [id], name: "incomingRelations", onDelete: Cascade)
  targetEntityId String

  @@unique([sourceEntityId, targetEntityId, relationType])
  @@index([sourceEntityId])
  @@index([targetEntityId])
  @@index([relationType])
}

model Questions {
  id             String           @id @default(nanoid())
  project        Projects         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId      String
  chunk          Chunks           @relation(fields: [chunkId], references: [id], onDelete: Cascade)
  chunkId        String
  question       String
  label          String
  answered       Boolean          @default(false)
  deleted        Boolean          @default(false)
  confirmed      Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  DatasetSamples DatasetSamples[]
  PreferencePair PreferencePair?

  @@index([projectId])
}

model DatasetSamples {
  id                     String    @id @default(nanoid())
  project                Projects  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId              String
  questions              Questions @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId             String
  question               String
  answer                 String
  chunkName              String
  chunkContent           String
  model                  String
  referenceLabel         String
  evidence               String
  cot                    String
  confidence             Float
  isPrimaryAnswer        Boolean   @default(false)
  aiScoreModel           String?
  factualAccuracyScore   Float?
  logicalIntegrityScore  Float?
  expressionQualityScore Float?
  safetyComplianceScore  Float?
  compositeScore         Float?
  factualInfo            String?
  logicalInfo            String?
  expressionInfo         String?
  safetyInfo             String?
  compositeInfo          String?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt

  @@index([projectId])
}

model PreferencePair {
  id              String    @id @default(nanoid())
  project         Projects  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId       String
  question        Questions @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId      String    @unique
  prompt          String
  chosen          String
  rejected        String
  datasetChosenId String?
  datasetRejectId String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model LlmProviders {
  id            String        @id
  project       Projects      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId     String
  name          String
  apiUrl        String
  apiKey        String
  interfaceType String
  icon          String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  ModelConfig   ModelConfig[]
}

model LlmModels {
  id           String   @id @default(nanoid())
  modelId      String
  modelName    String
  providerName String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model ModelConfig {
  id          String       @id @default(nanoid())
  provider    LlmProviders @relation(fields: [providerId], references: [id])
  providerId  String
  modelId     String
  modelName   String
  type        String
  temperature Float
  maxTokens   Int
  topP        Float?
  topK        Float?
  status      Boolean      @default(true)
  isDefault   Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  Project     Projects     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  ModelUsage  ModelUsage[]
}

model ParserConfig {
  id          String   @id @default(nanoid())
  project     Projects @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  serviceId   String
  serviceName String
  apiUrl      String
  apiKey      String
  status      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model WorkFlow {
  id             String         @id @default(nanoid())
  project        Projects       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId      String
  name           String
  description    String?
  edges          String
  nodes          String
  status         Int            @default(0) // 0等待中 1运行中 2执行完成 3执行失败
  isScheduled    Boolean        @default(false)
  cronExpression String?
  runAt          DateTime?
  failedAttempts Int            @default(0)
  maxRetries     Int            @default(3)
  createdAt      DateTime       @default(now())
  startedAt      DateTime?
  finishedAt     DateTime?
  updatedAt      DateTime       @updatedAt
  steps          WorkflowStep[]
}

model WorkflowStep {
  id         String    @id @default(nanoid())
  workflow   WorkFlow  @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workflowId String
  name       String
  status     Int       @default(0) // 0等待中 1运行中 2执行完成 3执行失败
  sort       Int
  input      String?
  output     String?
  startedAt  DateTime?
  finishedAt DateTime?
  retryCount Int       @default(0)
  logs       String?
}

model Chat {
  id              String            @id @default(nanoid())
  project         Projects          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId       String
  title           String
  user            Users             @relation(fields: [userId], references: [id])
  userId          String
  visibility      String            @default("PRIVATE")
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  ChatMessages    ChatMessages[]
  ChatMessageVote ChatMessageVote[]
}

model ChatMessages {
  id              String            @id @default(nanoid())
  chat            Chat              @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId          String
  role            String
  parts           String
  attachments     String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  ChatMessageVote ChatMessageVote[]
}

model ChatMessageVote {
  chat      Chat         @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId    String
  message   ChatMessages @relation(fields: [messageId], references: [id])
  messageId String
  isUpvote  Boolean

  @@unique([chatId, messageId])
}

model ModelUsage {
  id               String      @id @default(nanoid())
  projectId        String
  modelConfig      ModelConfig @relation(fields: [modelConfigId], references: [id], onDelete: Cascade)
  modelConfigId    String
  promptTokens     Int
  completionTokens Int
  totalTokens      Int
  createdAt        DateTime    @default(now())

  @@index([createdAt])
  @@index([modelConfigId])
}
